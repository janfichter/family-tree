(function(global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined'
        ? (module.exports = factory(require('d3')))
        : typeof define === 'function' && define.amd
            ? define(['d3'], factory)
            : ((global = typeof globalThis !== 'undefined' ? globalThis : global),
              (global.f3 = factory(global.d3)));
})(this, function(d3) {
    'use strict';

    function createStore(data) {
        const state = {
            data: data.data || [],
            main_id: data.main_id || null,
            node_separation: data.node_separation || 250,
            level_separation: data.level_separation || 150,
            tree: []
        };

        const calculateTree = () => {
            const nodesMap = {};
            state.data.forEach(p => {
                if (p.id) nodesMap[p.id] = p;
            });

            const tree = [];

            function build(person, depth = 0) {
                if (tree.some(n => n.id === person.id)) return;
                tree.push({...person, depth});

                const children = (person.rels?.children || []).map(id => nodesMap[id]).filter(Boolean);
                children.forEach(child => build(child, depth + 1));
            }

            if (state.main_id && nodesMap[state.main_id]) {
                build(nodesMap[state.main_id]);
            } else if (state.data.length > 0) {
                build(state.data[0]);
            }

            state.tree = tree.map((n, i) => ({
                ...n,
                _x: n.depth * state.node_separation,
                _y: i * state.level_separation
            }));
        };

        return {
            state: state,
            update: {
                mainId(id) {
                    this.state.main_id = id;
                    calculateTree();
                },
                tree(config) {
                    calculateTree();
                    if (config && config.initial) {
                        this.tree = this.state.tree;
                    }
                }
            },
            getData() {
                return this.state.data;
            },
            getTree() {
                return this.state.tree;
            },
            setOnUpdate(fn) {}
        };
    }

    function d3AnimationView({ store, cont }) {
        const svg = d3.select(cont).append("svg")
            .attr("width", "100%")
            .attr("height", "100%");
        const g = svg.append("g");

        return {
            svg: g,
            update(props) {
                props = props || {};
                props.tree = props.tree || store.getTree();

                g.selectAll("*").remove();

                props.tree.forEach(node => {
                    const card = g.append("g")
                        .attr("transform", `translate(${node._x}, ${node._y})`);

                    card.append("rect")
                        .attr("width", 220)
                        .attr("height", 100)
                        .attr("fill", "#fff")
                        .attr("stroke", "#999");

                    card.append("text")
                        .attr("x", 80)
                        .attr("y", 10)
                        .text(`${node.data["first name"]} ${node.data["last name"]}`);
                });
            }
        };
    }

    function createCard({ store, svg, card_dim, card_display }) {
        return {
            template: `<g><rect width="${card_dim.w}" height="${card_dim.h}" fill="#fff" stroke="#999"/></g>`,
            mounted(el) {
                el.innerHTML = this.template;
            }
        };
    }

    const f3 = {
        createStore: createStore,
        d3AnimationView: d3AnimationView,
        elements: {
            Card: createCard
        }
    };

    window.f3 = f3;
    return f3;
});